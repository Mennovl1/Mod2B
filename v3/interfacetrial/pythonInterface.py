# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pythonInterface
else:
    import _pythonInterface

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


MAXSTARS = _pythonInterface.MAXSTARS
SPEEDRANGE = _pythonInterface.SPEEDRANGE
PI = _pythonInterface.PI
G = _pythonInterface.G

def datetime():
    return _pythonInterface.datetime()

def normsq(a, b):
    return _pythonInterface.normsq(a, b)

def donormalsim(world, csvfile, plotPos):
    return _pythonInterface.donormalsim(world, csvfile, plotPos)

def errorapprox(world, csvfile):
    return _pythonInterface.errorapprox(world, csvfile)

def createfile():
    return _pythonInterface.createfile()

def firstline(starlist, csvfile, plotpos):
    return _pythonInterface.firstline(starlist, csvfile, plotpos)

def main():
    return _pythonInterface.main()
class Star(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pos = property(_pythonInterface.Star_pos_get, _pythonInterface.Star_pos_set)
    vel = property(_pythonInterface.Star_vel_get, _pythonInterface.Star_vel_set)
    acc = property(_pythonInterface.Star_acc_get, _pythonInterface.Star_acc_set)
    mass = property(_pythonInterface.Star_mass_get, _pythonInterface.Star_mass_set)
    radius = property(_pythonInterface.Star_radius_get, _pythonInterface.Star_radius_set)
    id = property(_pythonInterface.Star_id_get, _pythonInterface.Star_id_set)

    def __init__(self, *args):
        _pythonInterface.Star_swiginit(self, _pythonInterface.new_Star(*args))

    def setMass(self, newmass):
        return _pythonInterface.Star_setMass(self, newmass)

    def setAcc(self, newAcc):
        return _pythonInterface.Star_setAcc(self, newAcc)

    def inWorld(self):
        return _pythonInterface.Star_inWorld(self)

    def calcEnergy(self):
        return _pythonInterface.Star_calcEnergy(self)

    def calcImpuls(self, i):
        return _pythonInterface.Star_calcImpuls(self, i)

    def calcImpulsMoment(self, reference):
        return _pythonInterface.Star_calcImpulsMoment(self, reference)
    __swig_destroy__ = _pythonInterface.delete_Star

# Register Star in _pythonInterface:
_pythonInterface.Star_swigregister(Star)
cvar = _pythonInterface.cvar
RANDOM = cvar.RANDOM


def randomStar(id):
    return _pythonInterface.randomStar(id)

def randomStaruniform(id):
    return _pythonInterface.randomStaruniform(id)
class Node(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    centre = property(_pythonInterface.Node_centre_get, _pythonInterface.Node_centre_set)
    com = property(_pythonInterface.Node_com_get, _pythonInterface.Node_com_set)
    mass = property(_pythonInterface.Node_mass_get, _pythonInterface.Node_mass_set)
    radius = property(_pythonInterface.Node_radius_get, _pythonInterface.Node_radius_set)
    children = property(_pythonInterface.Node_children_get, _pythonInterface.Node_children_set)
    subdivided = property(_pythonInterface.Node_subdivided_get, _pythonInterface.Node_subdivided_set)
    ChildrenNodes = property(_pythonInterface.Node_ChildrenNodes_get, _pythonInterface.Node_ChildrenNodes_set)
    firstchild = property(_pythonInterface.Node_firstchild_get, _pythonInterface.Node_firstchild_set)
    num = property(_pythonInterface.Node_num_get, _pythonInterface.Node_num_set)
    nodeId = property(_pythonInterface.Node_nodeId_get, _pythonInterface.Node_nodeId_set)
    level = property(_pythonInterface.Node_level_get, _pythonInterface.Node_level_set)

    def __init__(self):
        _pythonInterface.Node_swiginit(self, _pythonInterface.new_Node())

    def freechildren(self):
        return _pythonInterface.Node_freechildren(self)

    def setCentre(self, c):
        return _pythonInterface.Node_setCentre(self, c)

    def setLevel(self, lvl):
        return _pythonInterface.Node_setLevel(self, lvl)

    def setRadius(self, r):
        return _pythonInterface.Node_setRadius(self, r)

    def getOctant(self, starpos):
        return _pythonInterface.Node_getOctant(self, starpos)

    def CalcCentre(self, octant, i):
        return _pythonInterface.Node_CalcCentre(self, octant, i)

    def updateCOM(self, star):
        return _pythonInterface.Node_updateCOM(self, star)

    def newChild(self, octant):
        return _pythonInterface.Node_newChild(self, octant)

    def insert(self, star):
        return _pythonInterface.Node_insert(self, star)

    def calcForce(self, TargetStar):
        return _pythonInterface.Node_calcForce(self, TargetStar)
    __swig_destroy__ = _pythonInterface.delete_Node

# Register Node in _pythonInterface:
_pythonInterface.Node_swigregister(Node)


def copyNode(copy):
    return _pythonInterface.copyNode(copy)

def buildTree(strlist, WORLDSIZE):
    return _pythonInterface.buildTree(strlist, WORLDSIZE)

def renewTree(strlist, tree, worldsize):
    return _pythonInterface.renewTree(strlist, tree, worldsize)
class Universe(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    stars = property(_pythonInterface.Universe_stars_get, _pythonInterface.Universe_stars_set)
    tree = property(_pythonInterface.Universe_tree_get, _pythonInterface.Universe_tree_set)
    acc = property(_pythonInterface.Universe_acc_get, _pythonInterface.Universe_acc_set)

    def __init__(self, *args):
        _pythonInterface.Universe_swiginit(self, _pythonInterface.new_Universe(*args))

    def do3LPFstep(self, dt):
        return _pythonInterface.Universe_do3LPFstep(self, dt)

    def calcAcc(self):
        return _pythonInterface.Universe_calcAcc(self)

    def initAcc(self, starid):
        return _pythonInterface.Universe_initAcc(self, starid)

    def calcEnergy(self):
        return _pythonInterface.Universe_calcEnergy(self)

    def calcImpuls(self, i):
        return _pythonInterface.Universe_calcImpuls(self, i)

    def calcImpulsMoment(self):
        return _pythonInterface.Universe_calcImpulsMoment(self)
    __swig_destroy__ = _pythonInterface.delete_Universe

# Register Universe in _pythonInterface:
_pythonInterface.Universe_swigregister(Universe)


def LPFstep(dot, cur, dt):
    return _pythonInterface.LPFstep(dot, cur, dt)

def gravity(a, b, mass):
    return _pythonInterface.gravity(a, b, mass)
class pythonInterface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def doInit(self, worldSize, numStars, treeCode, theta, epsilon, inner_radius, massPlanet, massBlackHole):
        return _pythonInterface.pythonInterface_doInit(self, worldSize, numStars, treeCode, theta, epsilon, inner_radius, massPlanet, massBlackHole)

    def doStep(self, dT):
        return _pythonInterface.pythonInterface_doStep(self, dT)

    def __init__(self):
        _pythonInterface.pythonInterface_swiginit(self, _pythonInterface.new_pythonInterface())

    def getStarpos(self, i):
        return _pythonInterface.pythonInterface_getStarpos(self, i)
    exists = property(_pythonInterface.pythonInterface_exists_get, _pythonInterface.pythonInterface_exists_set)
    world = property(_pythonInterface.pythonInterface_world_get, _pythonInterface.pythonInterface_world_set)
    __swig_destroy__ = _pythonInterface.delete_pythonInterface

# Register pythonInterface in _pythonInterface:
_pythonInterface.pythonInterface_swigregister(pythonInterface)


def appendstep(*args):
    return _pythonInterface.appendstep(*args)

def blackhole(id):
    return _pythonInterface.blackhole(id)


